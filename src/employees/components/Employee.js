import React, { useEffect, useState } from "react";
import Swal from "sweetalert2";
import EmployeeModal from "./EmployeeModal";

export default function EmployeePage() {
  const [modalOpen, setModalOpen] = useState(false);
  const [allEmployees, setAllEmployees] = useState([]);
  const [employees, setEmployees] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [selectedEmployee, setSelectedEmployee] = useState(null); // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  const itemsPerPage = 10;

  useEffect(() => {
    const fakeEmployees = Array.from({ length: 85 }, (_, i) => ({
      code: String(i + 1).padStart(7, "0"),
      name: `‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö ${i + 1} ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•`,
      email: `user${i + 1}@email.com`,
      phone: `0990000${String(i + 1).padStart(3, "0")}`,
      role: i % 2 === 0 ? "‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö" : "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
    }));
    setAllEmployees(fakeEmployees);
  }, []);

  useEffect(() => {
    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    setEmployees(allEmployees.slice(start, end));
  }, [allEmployees, currentPage]);

  const handleSave = (newData) => {
    if (selectedEmployee) {
      // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
      const updated = allEmployees.map((emp) =>
        emp.code === selectedEmployee.code ? { ...emp, ...newData } : emp
      );
      setAllEmployees(updated);
    } else {
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
      const newEmployee = {
        ...newData,
        code: String(Date.now()).slice(-7),
      };
      setAllEmployees([newEmployee, ...allEmployees]);
    }

    setModalOpen(false);
    setSelectedEmployee(null);

    Swal.fire({
      icon: "success",
      title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      confirmButtonColor: "#000",
    });
  };

  const handleEdit = (emp) => {
    setSelectedEmployee(emp); // ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÅ‡∏Å‡πâ
    setModalOpen(true);
  };

  const handleDelete = (empCode) => {
    Swal.fire({
      title: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      text: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonColor: "#d33",
      cancelButtonColor: "#aaa",
      confirmButtonText: "‡∏•‡∏ö",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    }).then((result) => {
      if (result.isConfirmed) {
        const filtered = allEmployees.filter((emp) => emp.code !== empCode);
        setAllEmployees(filtered);
        Swal.fire("‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß!", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "success");
      }
    });
  };

  const totalPages = Math.ceil(allEmployees.length / itemsPerPage);

  return (
    <div className="p-6">
      <div className="bg-white rounded-lg shadow p-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-semibold">‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</h2>
          <button
            className="bg-black text-white px-4 py-2 rounded"
            onClick={() => {
              setSelectedEmployee(null); // ‚úÖ clear ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°
              setModalOpen(true);
            }}
          >
            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          </button>
        </div>

        <table className="w-full table-auto text-center">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-4 py-2">‡∏£‡∏´‡∏±‡∏™</th>
              <th className="px-4 py-2">‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
              <th className="px-4 py-2">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</th>
              <th className="px-4 py-2">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå</th>
              <th className="px-4 py-2">‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</th>
              <th className="px-4 py-2">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
            </tr>
          </thead>
          <tbody>
            {employees.map((emp) => (
              <tr key={emp.code} className="border-t">
                <td className="px-4 py-2">{emp.code}</td>
                <td className="px-4 py-2">{emp.name}</td>
                <td className="px-4 py-2">{emp.email}</td>
                <td className="px-4 py-2">{emp.phone}</td>
                <td className="px-4 py-2">{emp.role}</td>
                <td className="px-4 py-2">
                  <button
                    className="text-yellow-500 mr-2"
                    onClick={() => handleEdit(emp)}
                  >
                    ‚úèÔ∏è
                  </button>
                  <button
                    className="text-red-500"
                    onClick={() => handleDelete(emp.code)}
                  >
                    üóëÔ∏è
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>

        {/* Pagination */}
        <div className="flex justify-between items-center mt-4 text-sm text-gray-600">
          <div>
            ‡πÅ‡∏™‡∏î‡∏á {(currentPage - 1) * itemsPerPage + 1} -{" "}
            {Math.min(currentPage * itemsPerPage, allEmployees.length)} ‡∏à‡∏≤‡∏Å{" "}
            {allEmployees.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </div>
          <div className="flex gap-1 items-center">
            <button
              onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
              className="px-2 py-1 border rounded disabled:opacity-50"
              disabled={currentPage === 1}
            >
              &lt;
            </button>
            {Array.from({ length: totalPages }, (_, i) => i + 1).map((num) => (
              <button
                key={num}
                onClick={() => setCurrentPage(num)}
                className={`px-3 py-1 rounded border ${
                  currentPage === num
                    ? "bg-black text-white border-black"
                    : "hover:bg-gray-200"
                }`}
              >
                {num}
              </button>
            ))}
            <button
              onClick={() =>
                setCurrentPage((prev) => Math.min(prev + 1, totalPages))
              }
              className="px-2 py-1 border rounded disabled:opacity-50"
              disabled={currentPage === totalPages}
            >
              &gt;
            </button>
          </div>
        </div>
      </div>

      {modalOpen && (
        <EmployeeModal
          onClose={() => {
            setModalOpen(false);
            setSelectedEmployee(null);
          }}
          onSave={handleSave}
          defaultData={selectedEmployee} // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ modal
        />
      )}
    </div>
  );
}
